{
  "version": "1.1.2",

  "fnArgLinks": {
    "event": "#events",
    "events": "#events",
    "eventsMap": "#events"
  },

  "sections": [

    { "name": "Introduction", "md": "intro" },

    { "name": "Events", "md": "events" },

    {
      "name": "Thread",
      "md": "thread/intro",
      "sections": [
        {
          "name": "Minification",
          "md": "thread/minification"
        },

        {
          "name": "Globals",
          "md": "thread/globals",
          "fns": [
            {
              "name": "_ref_",
              "descr": "Get the specified variable in the thread's scope, preventing minification issues.",
              "formats": [
                {
                  "args": [
                    { "name": "name", "descr": "The name of the variable to get." }
                  ]
                }
              ],
              "md": "thread/_ref_"
            },

            {
              "name": "resolve",
              "descr": "Resolve the thread's run promise with a single value such that other entities (like the main JS thread or other threads) can read it.",
              "md": "thread/resolve"
            },

            {
              "name": "reject",
              "descr": "Reject the thread's run promise with a single error value such that other entities (like the main JS thread or other threads) can read it.",
              "md": "thread/reject"
            },

            {
              "name": "listen",
              "descr": "Listen to messages sent to the thread.",
              "formats": [
                {
                  "args": [
                    { "name": "function(msg)", "descr": "A function that is called when a message, `msg`, is received." }
                  ]
                }
              ],
              "md": "thread/listen"
            },

            {
              "name": "broadcast",
              "pureAliases": ["message"],
              "descr": "Broadcast a message to entities who are listening to the thread.",
              "formats": [
                {
                  "args": [
                    { "name": "msg", "descr": "A message, e.g. JSON object or string, that is broadcasted." }
                  ]
                }
              ],
              "md": "thread/listen"
            }
          ]
        },

        {
          "name": "Execution",
          "fns": [
            {
              "name": "thread.require",
              "pureAliases": ["thread.include"],
              "descr": "Require a named function into the thread, giving the thread a global reference to the function.  Plain objects or simple objects with a prototype (that can be inpected and serialised live) are also supported.  Specifying the name of a JS file (i.e. a string ending in '.js') allows for importing external files into the global thread scope.",
              "formats": [
                {
                  "args": [
                    { "name": "obj", "descr": "The named function, simple object, or JS file name to require that is serialised and copied to the thread." },
                    { "name": "as", "descr": "The name of the object as available in the thread.  This is mandatory for an object that is not a named function, because its name can not be automatically inferred.  This is also mandatory if minification is used, to prevent mangling.", "optional": true }
                  ]
                }
              ],
              "md": "thread/require"
            },

            {
              "name": "thread.pass",
              "descr": "Pass data to the thread such that it is accessible within `thread.run()` etc callback functions.",
              "formats": [
                {
                  "args": [
                    { "name": "passed", "descr": "JSON serialisable data that is passed to `thread.run()`." }
                  ]
                }
              ],
              "md": "thread/pass"
            },

            {
              "name": "thread.run",
              "pureAliases": ["thread.promise"],
              "descr": "Run the specified function in the thread, returning a promise that is resolved when the thread calls [`resolve()`](#thread/globals/resolve) or when the specified function returns a value.",
              "formats": [
                {
                  "args": [
                    { "name": "function( passed )", "descr": "The function which will be copied and run in the thread." }
                  ]
                }
              ],
              "md": "thread/run"
            },

            {
              "name": "thread.map",
              "descr": "Get a mapping from the thread using the specified mapping function that uses [`resolve()`](#thread/globals/resolve) or a return value to specify the mapped value for each element.",
              "formats": [
                {
                  "args": [
                    { "name": "function( currVal, index, array )", "descr": "A mapping function that specifies the resultant mapped value via `resolve()` or a return value.", "fields": [
                      { "name": "currVal", "descr": "The current element being processed in the passed array." },
                      { "name": "index", "descr": "The index of the current element being processed in the passed array.", "optional": true },
                      { "name": "array", "descr": "The passed array `map()` was called upon.", "optional": true }
                    ] }
                  ]
                }
              ],
              "md": "thread/map"
            },

            {
              "name": "thread.reduce",
              "descr": "Apply a function against an accumulator and each value of the passed array (from left-to-right) has to reduce it to a single value.  The function specifies the resultant value via [`resolve()`](#thread/globals/resolve) or a return value.",
              "formats": [
                {
                  "args": [
                    {
                      "name": "function( prevVal, currVal, index, array )",
                      "descr": "The accumulator function.",
                      "fields": [
                        { "name": "prevVal", "descr": "The value previously returned in the last invocation of the accumulator function, or initVal if supplied." },
                        { "name": "currVal", "descr": "The current element being processed in the passed array." },
                        { "name": "index", "descr": "The index of the current element being processed in the passed array." },
                        { "name": "array", "descr": "The passed array `reduce()` was called upon." }
                      ]
                    },
                    { "name": "initVal", "descr": "Value to use as the first argument to the first call of the accumulator function.", "optional": true }
                  ]
                }
              ]
            },

            {
              "name": "thread.reduceRight",
              "descr": "Apply a function against an accumulator and each value of the passed array (from right-to-left) has to reduce it to a single value.  The function specifies the resultant value via [`resolve()`](#thread/globals/resolve) or a return value.",
              "formats": [
                {
                  "args": [
                    {
                      "name": "function( prevVal, currVal, index, array )",
                      "descr": "The accumulator function.",
                      "fields": [
                        { "name": "prevVal", "descr": "The value previously returned in the last invocation of the accumulator function, or initVal if supplied." },
                        { "name": "currVal", "descr": "The current element being processed in the passed array." },
                        { "name": "index", "descr": "The index of the current element being processed in the passed array." },
                        { "name": "array", "descr": "The passed array `reduceRight()` was called upon." }
                      ]
                    },
                    { "name": "initVal", "descr": "Value to use as the first argument to the first call of the accumulator function.", "optional": true }
                  ]
                }
              ]
            },

            {
              "name": "thread.stop",
              "pureAliases": ["thread.halt", "thread.terminate"],
              "descr": "Terminates the thread such that it no longer runs."
            },

            {
              "name": "thread.stopped",
              "descr": "Get whether the thread is stopped (i.e. terminated via `thread.stop()`)."
            }
          ]
        },

        {
          "name": "Events",
          "md": "thread/events",
          "fns": [
            {
              "name": "thread.message",
              "descr": "Send the thread a message.",
              "formats": [
                {
                  "args": [
                    { "name": "msg", "descr": "The message (e.g. JSON object or string) to send to the thread." }
                  ]
                }
              ],
              "md": "thread/listen"
            },

            {
              "name": "thread.on",
              "pureAliases": ["thread.bind", "thread.listen", "thread.addListener"],
              "descr": "Bind to events that are emitted by the thread.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names." },
                    { "name": "data", "descr": "A plain object which is passed to the handler in the event object argument.", "optional": true },
                    { "name": "function(evt)", "descr": "The handler function that is called when one of the specified events occurs.", "fields": [ { "name": "evt", "descr": "The event object." } ] }
                  ]
                },

                {
                  "args": [
                    { "name": "eventsMap", "descr": "A map of event names to handler functions." },
                    { "name": "data", "descr": "A plain object which is passed to the handler in the event object argument.", "optional": true }
                  ]
                }
              ],
              "md": "thread/on"
            },

            {
              "name": "thread.promiseOn",
              "pureAliases": ["thread.pon"],
              "descr": "Get a promise that is resolved when the first of any of the specified events is triggered on the thread.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names." }
                  ]
                }
              ],
              "md": "thread/promiseOn"
            },

            {
              "name": "thread.one",
              "descr": "Bind to events that are emitted by the thread, and trigger the handler only once.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names." },
                    { "name": "data", "descr": "A plain object which is passed to the handler in the event object argument.", "optional": true },
                    { "name": "function(evt)", "descr": "The handler function that is called when one of the specified events occurs.", "fields": [ { "name": "evt", "descr": "The event object." } ] }
                  ]
                },

                {
                  "args": [
                    { "name": "eventsMap", "descr": "A map of event names to handler functions." },
                    { "name": "data", "descr": "A plain object which is passed to the handler in the event object argument.", "optional": true }
                  ]
                }
              ],
              "md": "thread/one"
            },

            {
              "name": "thread.off",
              "pureAliases": ["thread.unbind", "thread.unlisten", "thread.removeListener"],
              "descr": "Remove event handlers on the thread.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names." },
                    { "name": "handler", "descr": "A reference to the handler function to remove.", "optional": true }
                  ]
                },

                {
                  "args": [
                    { "name": "eventsMap", "descr": "A map of event names to handler functions to remove." }
                  ]
                }
              ],
              "md": "thread/off"
            },

            {
              "name": "thread.trigger",
              "pureAliases": ["thread.emit"],
              "descr": "Trigger one or more events on the thread.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names to trigger." },
                    { "name": "extraParams", "descr": "An array of additional parameters to pass to the handler.", "optional": true }
                  ]
                }
              ],
              "md": "thread/trigger"
            }

          ]
        }
      ]
    },

    {
      "name": "Fabric",
      "md": "fabric/intro",
      "sections": [
        {
          "name": "Execution",
          "fns": [
            {
              "name": "fabric.require",
              "pureAliases": ["fabric.include"],
              "descr": "Require a named function into each thread in the fabric, giving a global reference to the function.  Plain objects or simple objects with a prototype (that can be inpected and serialised live) are also supported.  Specifying the name of a JS file (i.e. a string ending in '.js') allows for importing external files into the global thread scope.",
              "formats": [
                {
                  "args": [
                    { "name": "obj", "descr": "The named function, simple object, or JS file name to require that is serialised and copied to the fabric." },
                    { "name": "as", "descr": "The name of the object as available in the fabric.  This is mandatory for an object that is not a named function, because its name can not be automatically inferred.", "optional": true }
                  ]
                }
              ],
              "md": "fabric/require"
            },

            {
              "name": "fabric.pass",
              "descr": "Pass data to the fabric such that it is accessible within `fabric.spread()` etc callback functions.",
              "formats": [
                {
                  "args": [
                    { "name": "passed", "descr": "JSON serialisable data that is passed to functions like `fabric.spread()`." }
                  ]
                }
              ],
              "md": "fabric/pass"
            },

            {
              "name": "fabric.random",
              "descr": "Get a random thread from the fabric.",
              "md": "fabric/random"
            },

            {
              "name": "fabric.run",
              "pureAliases": ["fabric.promise"],
              "descr": "Run the specified function in a random thread of the fabric, returning a promise that is resolved when the thread calls [`resolve()`](#fabric/globals/resolve) or when the specified function returns a value.",
              "formats": [
                {
                  "args": [
                    { "name": "function( passed )", "descr": "The function which will be copied and run in the fabric." }
                  ]
                }
              ],
              "md": "fabric/run"
            },

            {
              "name": "fabric.map",
              "descr": "Get a mapping from the fabric using the specified mapping function that uses [`resolve()`](#fabric/globals/resolve) or a return value to specify the mapped value for each element.",
              "formats": [
                {
                  "args": [
                    { "name": "function( currVal, index, array )", "descr": "A mapping function that specifies the resultant mapped value via `resolve()` or a return value.", "fields": [
                      { "name": "currVal", "descr": "The current element being processed in the passed array." },
                      { "name": "index", "descr": "The index of the current element being processed in the passed array.", "optional": true },
                      { "name": "array", "descr": "The passed array `map()` was called upon.", "optional": true }
                    ] }
                  ]
                }
              ],
              "md": "fabric/map"
            },

            {
              "name": "fabric.filter",
              "descr": "Filters the passed array, giving a resultant array that contains the elements which pass the specified test function.  The test function returns or [`resolve()`s](#fabric/globals/resolve) to specify the test result.",
              "formats": [
                {
                  "args": [
                    { "name": "function( currVal, index, array )", "descr": "The test function that returns or `resolve()`s a truthy value to specify whether the specified value passes the test.", "fields": [
                      { "name": "currVal", "descr": "The current element being processed in the passed array." },
                      { "name": "index", "descr": "The index of the current element being processed in the passed array.", "optional": true },
                      { "name": "array", "descr": "The passed array `filter()` was called upon.", "optional": true }
                    ] }
                  ]
                }
              ],
              "md": "fabric/filter"
            },

            {
              "name": "fabric.reduce",
              "descr": "Apply a function against an accumulator and each value of the passed array (from left-to-right) has to reduce it to a single value.  The function specifies the resultant value via [`resolve()`](#fabric/globals/resolve) or a return value.",
              "formats": [
                {
                  "args": [
                    {
                      "name": "function( prevVal, currVal, index, array )",
                      "descr": "The accumulator function.",
                      "fields": [
                        { "name": "prevVal", "descr": "The value previously returned in the last invocation of the accumulator function, or initVal if supplied." },
                        { "name": "currVal", "descr": "The current element being processed in the passed array." },
                        { "name": "index", "descr": "The index of the current element being processed in the passed array." },
                        { "name": "array", "descr": "The passed array `reduce()` was called upon." }
                      ]
                    },
                    { "name": "initVal", "descr": "Value to use as the first argument to the first call of the accumulator function.", "optional": true }
                  ]
                }
              ],
              "md": "fabric/reduce"
            },

            {
              "name": "fabric.reduceRight",
              "descr": "Apply a function against an accumulator and each value of the passed array (from right-to-left) has to reduce it to a single value.  The function specifies the resultant value via [`resolve()`](#fabric/globals/resolve) or a return value.",
              "formats": [
                {
                  "args": [
                    {
                      "name": "function( prevVal, currVal, index, array )",
                      "descr": "The accumulator function.",
                      "fields": [
                        { "name": "prevVal", "descr": "The value previously returned in the last invocation of the accumulator function, or initVal if supplied." },
                        { "name": "currVal", "descr": "The current element being processed in the passed array." },
                        { "name": "index", "descr": "The index of the current element being processed in the passed array." },
                        { "name": "array", "descr": "The passed array `reduceRight()` was called upon." }
                      ]
                    },
                    { "name": "initVal", "descr": "Value to use as the first argument to the first call of the accumulator function.", "optional": true }
                  ]
                }
              ],
              "md": "fabric/reduceRight"
            },

            {
              "name": "fabric.sort",
              "descr": "Sort the passed array, using a divide and conquer strategy with the threads.",
              "formats": [
                {
                  "args": [
                    {
                      "name": "function( a, b )",
                      "descr": "The sorting comparison function that returns a negative value for `a` before `b`, zero for `a` the same as `b`, and a positive value for `a` after `b`.",
                      "fields": [
                        { "name": "a", "descr": "The first value to compare." },
                        { "name": "b", "descr": "The second value to compare." }
                      ],
                      "optional": true
                    }
                  ]
                }
              ],
              "md": "fabric/sort"
            },

            {
              "name": "fabric.spread",
              "descr": "Split the passed data into slices to spread the data equally among the threads of the fabric.  The passed processing function specifies the resultant array slice via a return value or [`resolve()`](#fabric/globals/resolve).",
              "formats": [
                {
                  "args": [
                    {
                      "name": "function( slice )",
                      "descr": "The processing function which is run on each slice of passed data.",
                      "fields": [
                        { "name": "slice", "descr": "An array containing a slice of the passed data." }
                      ]
                    }
                  ]
                }
              ],
              "md": "fabric/spread"
            },

            {
              "name": "fabric.stop",
              "pureAliases": ["fabric.halt", "fabric.terminate"],
              "descr": "Terminates the fabric such that all its threads no longer run.",
              "md": "fabric/run"
            }
          ]
        },

        {
          "name": "Events",
          "md": "fabric/events",
          "fns": [
            {
              "name": "fabric.message",
              "descr": "Send a random thread in the fabric a message.",
              "formats": [
                {
                  "args": [
                    { "name": "msg", "descr": "The message (e.g. JSON object or string) to send to the thread." }
                  ]
                }
              ],
              "md": "fabric/message"
            },

            {
              "name": "fabric.broadcast",
              "descr": "Send all threads in the fabric a message.",
              "formats": [
                {
                  "args": [
                    { "name": "msg", "descr": "The message (e.g. JSON object or string) to send to the threads." }
                  ]
                }
              ],
              "md": "fabric/broadcast"
            },

            {
              "name": "fabric.on",
              "pureAliases": ["fabric.bind", "fabric.listen", "fabric.addListener"],
              "descr": "Bind to events that are emitted by the fabric.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names." },
                    { "name": "data", "descr": "A plain object which is passed to the handler in the event object argument.", "optional": true },
                    { "name": "function(evt)", "descr": "The handler function that is called when one of the specified events occurs.", "fields": [ { "name": "evt", "descr": "The event object." } ] }
                  ]
                },

                {
                  "args": [
                    { "name": "eventsMap", "descr": "A map of event names to handler functions." },
                    { "name": "data", "descr": "A plain object which is passed to the handler in the event object argument.", "optional": true }
                  ]
                }
              ]
            },

            {
              "name": "fabric.promiseOn",
              "pureAliases": ["fabric.pon"],
              "descr": "Get a promise that is resolved when the first of any of the specified events is triggered on the fabric.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names." }
                  ]
                }
              ],
              "md": "fabric/promiseOn"
            },

            {
              "name": "fabric.one",
              "descr": "Bind to events that are emitted by the fabric, and trigger the handler only once.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names." },
                    { "name": "data", "descr": "A plain object which is passed to the handler in the event object argument.", "optional": true },
                    { "name": "function(evt)", "descr": "The handler function that is called when one of the specified events occurs.", "fields": [ { "name": "evt", "descr": "The event object." } ] }
                  ]
                },

                {
                  "args": [
                    { "name": "eventsMap", "descr": "A map of event names to handler functions." },
                    { "name": "data", "descr": "A plain object which is passed to the handler in the event object argument.", "optional": true }
                  ]
                }
              ]
            },

            {
              "name": "fabric.off",
              "pureAliases": ["fabric.unbind", "fabric.unlisten", "fabric.removeListener"],
              "descr": "Remove event handlers on the fabric.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names." },
                    { "name": "handler", "descr": "A reference to the handler function to remove.", "optional": true }
                  ]
                },

                {
                  "args": [
                    { "name": "eventsMap", "descr": "A map of event names to handler functions to remove." }
                  ]
                }
              ]
            },

            {
              "name": "fabric.trigger",
              "pureAliases": ["fabric.emit"],
              "descr": "Trigger one or more events on the fabric.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names to trigger." },
                    { "name": "extraParams", "descr": "An array of additional parameters to pass to the handler.", "optional": true }
                  ]
                }
              ]
            }

          ]
        }
      ]
    }

  ]
}
